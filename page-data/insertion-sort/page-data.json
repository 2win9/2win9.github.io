{"componentChunkName":"component---src-templates-post-jsx","path":"/insertion-sort/","result":{"data":{"site":{"siteMetadata":{"title":"Wingu.blog"}},"markdownRemark":{"id":"5eaeca2d-db75-52ba-9f84-5f4c4cafd89c","excerpt":"본 포스트는 저자가 학습하며 작성한 글입니다. 틀린 내용이 있다면 지적해주시면 감사하겠습니다! 1. 삽입정렬 (Insertion Sort)  삽입정렬은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로 정렬을 수행하는 알고리즘이다. 이는 트럼프 카드더미를 손 안에서 정리하는 방식을 떠올리면 쉽게…","html":"<blockquote>\n<p>본 포스트는 저자가 학습하며 작성한 글입니다. 틀린 내용이 있다면 지적해주시면 감사하겠습니다!</p>\n</blockquote>\n<h2 id=\"1-삽입정렬-Insertion-Sort\" style=\"position:relative;\"><a href=\"#1-%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC-Insertion-Sort\" aria-label=\"1 삽입정렬 Insertion Sort permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. 삽입정렬 (Insertion Sort)</h2>\n<p><img src=\"/static/insertionsort-86996445cec4c906df93ed1311653650.gif\"></p>\n<p>삽입정렬은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로 정렬을 수행하는 알고리즘이다.</p>\n<p>이는 <strong>트럼프 카드더미를 손 안에서 정리하는 방식</strong>을 떠올리면 쉽게 이해할 수 있을 것이다.</p>\n<ol>\n<li>정렬되어 있지 않은 카드들을 받으면 가장 앞쪽부터 기준을 정한다.</li>\n<li>기준 카드를 오른손으로 빼고 그 앞에 있는 카드와 비교하여 더 작다면 뒤의 카드를 모두 한 칸씩 뒤로 밀어 놓고 그 카드의 앞에 끼워넣는다. (이 과정에서 가장 앞쪽이 기준인 경우는 정렬되어 있는 상태가 된다.)</li>\n<li>모든 카드가 기준이 될 때까지 반복한다.</li>\n</ol>\n<h2 id=\"2-시간-복잡도\" style=\"position:relative;\"><a href=\"#2-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"2 시간 복잡도 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. 시간 복잡도</h2>\n<p>삽입 정렬은 정렬할 배열이 모두 <strong>반대로</strong> 정렬되어 있는 경우 최악의 성능을 보인다. 각 원소를 삽입할 때 이미 정렬된 부분의 모든 요소와 비교해야 하므로, 첫 번째 원소를 제외한 모든 원소를 <strong>n - 1번</strong>씩 비교하게 된다. 모든 기준을 순회하는 부분까지 고려하면 전체 시간복잡도는 $n*(n-1)$ 으로 계산된다.</p>\n<p>즉, 삽입 정렬의 시간복잡도는  $O(n^2)$을 보장한다.</p>\n<h2 id=\"3-구현\" style=\"position:relative;\"><a href=\"#3-%EA%B5%AC%ED%98%84\" aria-label=\"3 구현 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. 구현</h2>\n<blockquote>\n<p>본 구현은 <strong>오름차순</strong>을 기준으로 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 배열의 모든 원소를 차례로 검사</span>\n    <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 원소(arr[i])를 정렬된 부분(arr[0] ~ arr[i-1])과 비교</span>\n        <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 원소가 정렬된 부분의 어떤 원소(arr[j])보다 작으면</span>\n            <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 원소를 temp에 임시 저장</span>\n                \n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> j<span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 뒤쪽 요소들을 한 칸씩 오른쪽으로 이동하여 자리 만들기</span>\n                    arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  \n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 빈 자리에 temp를 삽입하여 정렬된 상태 유지</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 원소가 제자리에 들어갔으므로 더 이상 비교하지 않음</span>\n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>먼저, 전체 배열의 원소 개수만큼 순회한다.\n<strong>제어변수 $i$ 는 현재 삽입할 요소의 기준 인덱스를 나타낸다.</strong></p>\n<p>내부 반복문을 돌며  $arr[i]$ 보다 큰 $arr[j]$을 발견한다면 그 자리까지 모두 한칸씩 뒤로 이동시켜 자리를 만든다.</p>\n<h2 id=\"4-정리\" style=\"position:relative;\"><a href=\"#4-%EC%A0%95%EB%A6%AC\" aria-label=\"4 정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>4. 정리</h2>\n<ul>\n<li>삽입정렬은 트럼프 카드 정리와 같은 방식의 정렬 알고리즘</li>\n<li>모든 카드가 반대로 정렬되어 있다면 원소 삽입 시 비교해야 한다.</li>\n<li>따라서 $O(N^2)$ 의 시간복잡도를 갖음</li>\n</ul>\n<h2 id=\"5-참고\" style=\"position:relative;\"><a href=\"#5-%EC%B0%B8%EA%B3%A0\" aria-label=\"5 참고 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>5. 참고</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%82%BD%EC%9E%85_%EC%A0%95%EB%A0%AC\">위키백과 - 삽입 정렬\n</a></li>\n</ul>","frontmatter":{"title":"정렬 중에 기본. 삽입 정렬","date":"November 07, 2024","update":"November 07, 2024","tags":["algorithm","sort"],"series":null},"fields":{"slug":"/insertion-sort/","readingTime":{"minutes":3.895}}},"seriesList":{"edges":[{"node":{"id":"5eaeca2d-db75-52ba-9f84-5f4c4cafd89c","fields":{"slug":"/insertion-sort/"},"frontmatter":{"title":"정렬 중에 기본. 삽입 정렬"}}},{"node":{"id":"bece1c04-47d7-540e-a9f5-f9feb7d6d6d9","fields":{"slug":"/about/"},"frontmatter":{"title":"This is about page ✋"}}}]},"previous":{"fields":{"slug":"/BOJ/"},"frontmatter":{"title":"[BOJ] abc"}},"next":null},"pageContext":{"id":"5eaeca2d-db75-52ba-9f84-5f4c4cafd89c","series":null,"previousPostId":"3bc6b907-1e55-5157-baa7-bfa5e7f1ef58","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}